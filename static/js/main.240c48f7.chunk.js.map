{"version":3,"sources":["components/search/search-field.component.jsx","components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchField","placeholder","handleChange","className","type","onChange","Card","props","alt","src","monsters","id","name","email","CardList","map","key","App","e","setState","searchFiled","target","value","state","fetch","then","res","json","users","catch","err","console","log","this","filteredMonsters","filter","monster","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"yUAEaA,G,MAAc,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OAEnB,2BAAOC,UAAU,SAASC,KAAO,SAASH,YAAcA,EAAaI,SAAYH,MCD5EI,G,MAAO,SAACC,GAAD,OAClB,yBAAKJ,UAAU,kBACb,yBACEK,IAAI,WACJC,IAAG,+BAA0BF,EAAMG,SAASC,GAAzC,4BAEL,4BAAKJ,EAAMG,SAASE,MACpB,2BAAIL,EAAMG,SAASG,UCNVC,G,MAAW,SAAAP,GAAK,OACxB,yBAAKJ,UAAU,aACXI,EAAMG,SAASK,KAAI,SAAAL,GAAQ,OACvB,kBAAC,EAAD,CAAMM,IAAKN,EAASC,GAAID,SAAUA,UC2EhCO,G,wDA5Eb,aAAe,IAAD,8BACZ,gBAiBFf,aAAa,SAACgB,GACZ,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAjBpC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAY,IAJF,E,gEASO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAET,SAAUkB,OAC1CC,OAAM,SAACC,GACNC,QAAQC,IAAIF,Q,+BAQR,IAAD,EAC2BG,KAAKV,MAA/Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACZc,EAAmBxB,EAASyB,QAAO,SAAAC,GAAO,OAC9CA,EAAQxB,KAAKyB,cAAcC,SAASlB,EAAYiB,kBAClD,OACE,yBAAKlC,UAAU,OACb,yBAAKA,UAAY,aACf,+CAQF,kBAAC,EAAD,CACAF,YAAY,mBACZC,aAAc+B,KAAK/B,eAEnB,kBAAC,EAAD,CAAUQ,SAAWwB,S,GA1CXK,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdzB,OAAM,SAAA0B,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.240c48f7.chunk.js","sourcesContent":["import React from 'react';\r\nimport './search-field.style.css'\r\nexport const SearchField = ({placeholder, handleChange})=>(\r\n\r\n        <input className='search' type = 'search' placeholder= {placeholder} onChange = {handleChange} />\r\n    \r\n);","import React from \"react\";\r\nimport \"./card.styles.css\";\r\n\r\nexport const Card = (props) => (\r\n  <div className=\"card-container\">\r\n    <img\r\n      alt=\"monsters\"\r\n      src={`https://robohash.org/${props.monsters.id}?set=set2&size=180x180`}\r\n    />\r\n    <h2>{props.monsters.name}</h2>\r\n    <p>{props.monsters.email}</p>\r\n  </div>\r\n);\r\n","import React from 'react' ;\r\nimport { Card } from '../card/card.component'\r\nimport './card-list.style.css';\r\n\r\nexport const CardList = props =>(\r\n     <div className='card-list'>\r\n        {props.monsters.map(monsters=>(\r\n             <Card key={monsters.id} monsters={monsters} />\r\n))}\r\n    </div>\r\n);\r\n","import React, { Component } from \"react\";\nimport { SearchField} from './components/search/search-field.component'\nimport { CardList } from './components/card-list/card-list.component';\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchFiled:'',\n    };\n  }\n   \n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((res) => res.json())\n      .then((users) => this.setState({ monsters: users }))\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n\n  handleChange=(e)=>{\n    this.setState({searchFiled:e.target.value})\n    }\n\n  render() {\n    const { monsters, searchFiled } = this.state;\n    const filteredMonsters = monsters.filter(monster=>\n      monster.name.toLowerCase().includes(searchFiled.toLowerCase()));\n    return (\n      <div className=\"App\">\n        <div className = 'main-page'>\n          <h1>Monsters Cards</h1>\n        </div>\n        {/* <input  \n        type='search'\n        placeholder='Search Monsters'\n        onChange={e=>\n        this.setState({searchFiled:e.target.value}, ()=>console.log(this.state))}\n        // /> */}\n        <SearchField \n        placeholder='Search Monsters!'\n        handleChange={this.handleChange}\n        /> \n        <CardList monsters= {filteredMonsters}></CardList>\n        {/* <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            {this.state.string}\n          </p>\n          <button onClick={() => {this.setState({string : 'Hello Pandey Ji!!!'})}}>Change Text!!</button>\n         \n        </header> */}\n        \n      </div>\n    );\n  }\n}\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}